name: $(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.rr)
variables:
  JSOC_EMAIL: "jsoc@cadair.com"  # For the example gallery on the dev deps build

schedules:
  - cron: "0 9 * * *"
         # \ \ \ \ \______ Days of week
         #  \ \ \ \_______ Months
         #   \ \ \________ Days
         #    \ \__________Hours
         #     \__________ Minutes
    displayName: Daily main build
    branches:
      include:
      - main
    always: true
  - cron: "15 9 * * *"
    displayName: Daily 3.0 build
    branches:
      include:
      - 3.0
    always: true
  - cron: "30 9 * * *"
    displayName: Daily 3.1 build
    branches:
      include:
      - 3.1
    always: true

resources:
  repositories:
  - repository: OpenAstronomy
    type: github
    endpoint: sunpy
    name: OpenAstronomy/azure-pipelines-templates

trigger:
  branches:
    include:
    - '*'
    exclude:
    - '*backport*'

pr:
  autoCancel: true

stages:
  - stage: FirstPhaseTests
    displayName: Core Tests
    jobs:
    - template: check-skip.yml@OpenAstronomy
    - template: run-tox-env.yml@OpenAstronomy
      parameters:
        default_python: '3.8'
        submodules: false
        coverage: codecov
        toxdeps: tox-pypi-filter
        posargs: -n auto --dist loadgroup
        libraries:
          apt:
            - libopenjp2-7
        envs:
          - linux: py39

  - stage: SecondPhaseTests
    displayName: Stage 2 Tests
    dependsOn: FirstPhaseTests
    condition: and(succeeded(), ne(dependencies.FirstPhaseTests.outputs['check_skip.search.found'], 'true'))
    jobs:
    - template: run-tox-env.yml@OpenAstronomy
      parameters:
        default_python: '3.8'
        submodules: false
        coverage: codecov
        toxdeps: tox-pypi-filter
        posargs: -n auto --dist loadgroup
        libraries:
          apt:
            - libopenjp2-7
            - graphviz
          brew:
            - openjpeg
        envs:
          - macos: py38
          - windows: py310
          - linux: py38-oldestdeps
            posargs: -n auto --dist loadfile
          - linux: py39-conda
            libraries: {}

  - ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.Reason'], 'Manual')) }}:
    - stage: CronTests
      displayName: Cron Tests
      dependsOn: []  # Don't wait on other stages
      jobs:
      - template: run-tox-env.yml@OpenAstronomy
        parameters:
          default_python: '3.8'
          submodules: false
          coverage: codecov
          toxdeps: tox-pypi-filter
          posargs: -n auto --dist loadgroup
          libraries:
            apt:
              - libopenjp2-7
              - graphviz
            yum:
              - openssl-devel
              - freetype-devel
              - libpng-devel
              - hdf5-devel
          envs:
            - linux: base_deps
            - linux: py39-devdeps

  - ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.Reason'], 'Manual')) }}:
    - stage: CronNotifier_OK
      condition: succeeded()
      dependsOn:
        - SecondPhaseTests
        - CronTests
      jobs:
      - job: notify
        pool:
          vmImage: ubuntu-20.04
        steps:
        - bash: |
            sudo apt-get install httpie xonsh
            http --version
        - bash: xonsh ./tools/send_matrix_message.xsh
          env:
            ROOMID: '%21JYqfIVJjWANcHnfktY:cadair.com'  # sunpy development room
            HOMESERVER: 'https://matrix.cadair.com'
            BRANCH: $(Build.SourceBranchName)
            ACCESS_TOKEN: $(azurebot_access_token)
            BUILDID: $(Build.BuildId)
            STATUS: Succeeded

  - ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.Reason'], 'Manual')) }}:
    - stage: CronNotifier_Fail
      condition: failed()
      dependsOn:
        - SecondPhaseTests
        - CronTests
      jobs:
      - job: notify
        pool:
          vmImage: ubuntu-20.04
        steps:
        - bash: |
            sudo apt-get install httpie xonsh
            http --version
        - bash: xonsh ./tools/send_matrix_message.xsh
          env:
            ROOMID: '%21JYqfIVJjWANcHnfktY:cadair.com'  # sunpy development room
            HOMESERVER: 'https://matrix.cadair.com'
            BRANCH: $(Build.SourceBranchName)
            ACCESS_TOKEN: $(azurebot_access_token)
            BUILDID: $(Build.BuildId)
            STATUS: Failed
